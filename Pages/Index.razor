@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@inject DialogService DialogService
@inject IJSRuntime JSRuntime;
@inject NavigationManager navigationManager
@inject IStringLocalizer<Index> Loc

<PageTitle>@Loc["page_title"]</PageTitle>

<section id="home" class="d-flex flex-column h-100vh text-white"
    style="background-image: url('img/IMG_9563.JPG'); background-position: 50%; background-size: cover;">
    <div class="container col-xxl-8 px-4 py-5 m-auto">
        <div class="row flex-lg-row-reverse align-items-center g-5 py-5">
            <div class="col-12 col-sm-8 col-md-6 mx-auto d-none d-sm-block">
                @if (timer != null)
                {
                    <RadzenRadialGauge Style="width: 100%; height: 500px;">
                        <RadzenRadialGaugeScale Step="1" Min="0" Max="12" StartAngle="0" EndAngle="360"
                        ShowFirstTick="false" MinorStep=@minorStep TickLength="20" MinorTickLength="10"
                        TickLabelOffset="40" TickPosition="GaugeTickPosition.Inside">
                            <RadzenRadialGaugeScalePointer Value=@hours Length="0.6" ShowValue="false" />
                            <RadzenRadialGaugeScalePointer Value=@seconds Length="0.9" Fill="red" Width="2"
                            ShowValue="false" />
                            <RadzenRadialGaugeScalePointer Value=@minutes Length="0.8" ShowValue="false" />
                        </RadzenRadialGaugeScale>
                    </RadzenRadialGauge>
                }
            </div>
            <div class="col-12 col-sm-8 col-md-6">
                <h1 class="display-4 fw-bold lh-1 mb-3">@Loc["section_home_title"]</h1>
                <p class="lead">@Loc["section_home_text"]</p>
            </div>
        </div>
    </div>
</section>

<section class="h-100vh d-flex flex-column bg-light">
    <div class="m-auto container col-xl-10 col-xxl-8 px-4 py-5">
        <div class="row align-items-center g-lg-5 py-5">
            <div class="col-12 col-lg-7">
                <h1 class="display-5 fw-bold lh-1 mb-3 text-center text-lg-start">@Loc["section_project_personal_title"]</h1>
                <p class="col-lg-10 fs-4 text-start">@Loc["section_project_personal_text"]</p>
                <div class="d-grid gap-2 d-sm-flex mb-5">
                    <RadzenButton class="rz-border-radius-3 px-4 me-sm-3" Text="@Loc["section_project_personal_button"]" Variant=Variant.Outlined Click="@(() => link("https://www.audeladuregard.fr/"))" />
                </div>
            </div>
            <div class="col-12 col-md-10 mx-auto col-lg-5 d-none d-sm-block">
                <img src="https://www.audeladuregard.fr/wp-content/themes/audela2016/images/logo_audela.png"
                    class="d-block mx-lg-auto img-fluid" alt="@(Loc["section_project_personal_image_alt"])" width="700" height="500">
            </div>
        </div>
    </div>
</section>

<section class="h-100vh d-flex flex-column text-white"
    style="background-image: url('img/IMG_8915.JPG'); background-position: 50%; background-size: cover;">
    <div class="m-auto container col-xl-10 col-xxl-8 px-4 py-5">
        <div class="row align-items-center g-lg-5 py-5">
            <div class="col-12">
                <h1 class="display-5 fw-bold lh-1 mb-3 text-center text-lg-start">@Loc["section_project_professional_title"]</h1>
                <p class="col-lg-10 fs-4 text-start">@Loc["section_project_professional_text"]</p>
            </div>
        </div>
    </div>
</section>

@if (skills != null)
{
    <section class="h-100vh d-flex flex-column bg-light">
        <div class="my-auto w-100">
            <h1 class="display-5 fw-bold w-100 text-center">@Loc["section_competence_title"]</h1>
            <div class="d-flex">
                <RadzenAccordion class="w-75 m-auto">
                    <Items>
                        @foreach (var category in skills.Select(s => s.Category).Distinct())
                        {
                            <RadzenAccordionItem Text="@category">
                                <RadzenDataList PageSize="@PageSize" WrapItems="true" AllowPaging="true"
                                Data="@(skills.Where(s => s.Category == category))" TItem="Competence">
                                    <Template Context="item">
                                        <RadzenCard Style="width: 250px;" Class="rz-border-radius-3">
                                            <div class="d-flex flex-row p-3">
                                                <div>
                                                    <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0">
                                                        @(item.Category)
                                                    </RadzenText>
                                                    <RadzenText TextStyle="TextStyle.Body1"><b
                                                            style="word-break: break-word;">@(item.Name)</b>
                                                    </RadzenText>
                                                </div>
                                            </div>
                                            <RadzenCard
                                                Class="my-3 rz-background-color-primary-lighter rz-shadow-0 rz-border-radius-0"
                                                style="margin: 0 calc(-1 * var(--rz-card-padding)); padding: 2rem; height: 200px;">
                                                <RadzenText TextStyle="TextStyle.H6" Class="rz-color-primary-light">
                                                    <strong>@Loc["section_competence_level"]</strong>
                                                </RadzenText>
                                                <RadzenRadialGauge Style="width: 100%; height: auto;">
                                                    <RadzenRadialGaugeScale StartAngle="-100" EndAngle="100" Step="2" Min="0"
                                                    Max="100" TickPosition=GaugeTickPosition.None>
                                                        <RadzenRadialGaugeScalePointer Value=@(item.Level) Length="0.6">
                                                            <Template Context="pointer">
                                                                <p>
                                                                    @pointer.Value %
                                                                </p>
                                                            </Template>
                                                        </RadzenRadialGaugeScalePointer>
                                                        <RadzenRadialGaugeScaleRange From="0" To="33" Fill="red" />
                                                        <RadzenRadialGaugeScaleRange From="33" To="67" Fill="orange" />
                                                        <RadzenRadialGaugeScaleRange From="67" To="100" Fill="green" />
                                                    </RadzenRadialGaugeScale>
                                                </RadzenRadialGauge>
                                            </RadzenCard>
                                        </RadzenCard>
                                    </Template>
                                </RadzenDataList>
                            </RadzenAccordionItem>
                        }
                    </Items>
                </RadzenAccordion>
            </div>
        </div>
    </section>
}

@if (github.repo != null)
{
    <section id="repository" class="h-100vh d-flex flex-column"
        style="background-image: url('img/IMG_5155.JPG'); background-position: 50%; background-size: cover;">
        <div class="my-auto w-100">
            <h1 class="display-5 fw-bold w-100 text-center">@Loc["section_repository_title"]</h1>
            <div class="d-flex">
                <RadzenDataList class="w-75 m-auto" PageSize="@PageSize" WrapItems="true" AllowPaging="true"
                Data="@(github.repo)" TItem="Repo">
                    <Template Context="item">
                        <RadzenCard Style="width: 250px;" Class="rz-border-radius-3 rz-shadow-10">
                            <div class="d-flex flex-row p-3">
                                <div>
                                    <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0">@Loc["section_repository_card_subtitle"]
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b
                                            style="word-break: break-word;">@(item.name)</b>
                                    </RadzenText>
                                </div>
                            </div>
                            <RadzenCard Class="my-3 rz-background-color-primary-lighter rz-shadow-0 rz-border-radius-0"
                                style="margin: 0 calc(-1 * var(--rz-card-padding)); padding: 2rem; height: 200px;">
                                <RadzenText TextStyle="TextStyle.H6" Class="rz-color-primary-light">
                                    <strong>@Loc["section_repository_card_information_title"]</strong>
                                </RadzenText>
                                <div class="row">
                                    <div>
                                        <RadzenText TextStyle="TextStyle.Overline"
                                            Class="rz-color-primary-light d-flex mt-3 mb-0">
                                            @Loc["section_repository_card_information_subtitle"]</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1">
                                            <b>@(item.description)</b>
                                        </RadzenText>
                                    </div>
                                </div>
                            </RadzenCard>
                            <div class="d-flex">
                                <RadzenButton Class="me-auto rz-border-radius-3" Text="@(Loc["section_repository_card_button"])"
                                Variant=@Variant.Outlined ButtonStyle="@ButtonStyle.Secondary"
                                Click="() => MoreInformationRepo(item)" />
                            </div>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            </div>
        </div>
    </section>
}

@code {
    private Timer? timer;
    private double hours;
    private double minutes;
    private double seconds;
    private double minorStep = 12 / 60.0;
    private int PageSize = 4;
    private Github github = new Github();
    List<Competence>? skills = null;

    protected override async Task OnInitializedAsync()
    {
        timer = new Timer(state =>
        {
            var now = DateTime.Now;

            hours = now.Hour % 12 + now.Minute / 60.0;

            minutes = now.Minute * minorStep + now.Second * 12 / 3600.0;
            seconds = now.Second * minorStep;

            InvokeAsync(StateHasChanged);
        }, null, 0, 1000);

        skills = new List<Competence>()
{
new Competence(Name: "C#", Category: Loc["section_competence_name_development"], Level: 50),
new Competence(Name: "Kotlin", Category: Loc["section_competence_name_development"], Level: 75),
new Competence(Name: "PHP", Category: Loc["section_competence_name_development"], Level: 50),
new Competence(Name: "HTML - CSS", Category: Loc["section_competence_name_development"], Level: 80),
new Competence(Name: "JavaScript", Category: Loc["section_competence_name_development"], Level: 10),
new Competence(Name: "SQL", Category: Loc["section_competence_name_database"], Level: 60),
new Competence(Name: "Docker", Category: Loc["section_competence_name_infrastructure"], Level: 0),
new Competence(Name: "Linux", Category: Loc["section_competence_name_operating_system"], Level: 80)
};

        github.profile = await Http.GetFromJsonAsync<Profile>("https://api.github.com/users/anrouxel");
        github.repo = await Http.GetFromJsonAsync<Repo[]>(github!.profile!.repos_url);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<object>("setOnResizeEvent", DotNetObjectReference.Create(this));
            await UpdatePageSize();
        }
    }

    protected void Dispose()
    {
        timer?.Dispose();
    }

    private async Task MoreInformationRepo(Repo repo)
    {
        await DialogService.OpenAsync<DialogCardRepo>(Loc["section_repository_card_button"],
        new Dictionary<string, object>() { { "repo", repo } },
        new Radzen.DialogOptions()
            {
                CloseDialogOnEsc = true,
                CloseDialogOnOverlayClick = true,
                Width = "fit-content",
                Height =
            "fit-content"
            });
    }

    private void link(string uri)
    {
        navigationManager.NavigateTo(uri, true);
    }

    [JSInvokable]
    public async Task UpdatePageSize()
    {
        var screenWidth = await JSRuntime.InvokeAsync<int>("getScreenWidth");
        if (screenWidth < 800)
        {
            PageSize = 1;
        }
        else
        {
            PageSize = 4;
        }
        await InvokeAsync(StateHasChanged);
    }
}